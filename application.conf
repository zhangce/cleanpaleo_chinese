deepdive {
  
  db.default: {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://localhost:5432/"${DB_NAME}
    user: ${DB_USER}
    password: ${DB_PASSWORD}
  }

  calibration: {
    holdout_fraction: 0.5
  }

  schema.variables:{

    relations_taxonomy.is_correct: Boolean
    relations_formation.is_correct: Boolean
    relations_formationtemporal.is_correct: Boolean
    relations_formationlocation.is_correct: Boolean

    relations_formationtemporal_global.is_correct: Boolean
    relations_formationlocation_global.is_correct: Boolean

  }

  extraction.extractors: {


    # Load document IDs into the table.
    # These IDs will be used by all downstream extractors as
    # the set of documents to process.
    #
    load_docids:{
        output_relation : "docids"
        input           : "SELECT 0"
        udf             : ${PALEO_HOME}"/udf/load_docids.py"
    }


    load_docs:{
        output_relation : "documents"
        input           : "SELECT * FROM docids"
        udf             : ${PALEO_HOME}"/udf/load_docs.py"
        dependencies    : ["load_docids"]
        parallelism     : 4
        input_batch_size: 2
    }


    extract_entities_interval : {
        output_relation : "entities_candidates"
        input           : "SELECT * from documents" 
        udf             : ${PALEO_HOME}"/udf/ext_entity_interval.py"
        dependencies    : ["load_docs"]
        parallelism     : 4
        input_batch_size: 2
    }

    extract_entities_formation : {
        output_relation : "entities_candidates"
        input           : "SELECT * from documents" 
        udf             : ${PALEO_HOME}"/udf/ext_entity_formation.py"
        dependencies    : ["load_docs"]
        parallelism     : 4
        input_batch_size: 2
    }


    extract_entities_location : {
        output_relation : "entities_candidates"
        input           : "SELECT * from documents" 
        udf             : ${PALEO_HOME}"/udf/ext_entity_location.py"
        dependencies    : ["load_docs"]
        parallelism     : 4
        input_batch_size: 2
    }


    extract_entities_fossil : {
        output_relation : "entities_candidates"
        input           : "SELECT * from documents" 
        udf             : ${PALEO_HOME}"/udf/ext_entity_fossil.py"
        dependencies    : ["load_docs"]
        parallelism     : 4
        input_batch_size: 2
    }


    extract_entities_finalize:{
        output_relation : "entities"
        input           : """
                            SELECT   t0.docid as "t0.docid", 
                                     t0.document as "t0.document",
                                     array_agg(t1.type) as "entities_types",
                                     array_agg(t1.entities) as "entities" 
                            FROM     documents t0, entities_candidates t1 
                            WHERE    t0.docid=t1.docid 
                            GROUP BY t0.docid, t0.document;
                          """
        udf             : ${PALEO_HOME}"/udf/ext_entity_finalize.py"
        dependencies    : ["extract_entities_interval", "extract_entities_formation", "extract_entities_fossil", "extract_entities_location"]
        parallelism     : 4
        input_batch_size: 2
    }

    extract_relation_candidates : {
        output_relation : "relation_candidates"
        input           : """
                            SELECT   t0.docid as "t0.docid", 
                                     t0.document as "t0.document",
                                     array_agg(t1.type) as "entities_types",
                                     array_agg(t1.entities) as "entities" 
                            FROM     documents t0, entities_candidates t1 
                            WHERE    t0.docid=t1.docid 
                            GROUP BY t0.docid, t0.document;
                          """
        udf             : ${PALEO_HOME}"/udf/ext_relation_candidates.py"
        dependencies    : ["extract_entities_finalize"]
        parallelism     : 4
        input_batch_size: 2
    }


    load_relation_varialbe_formationtemporal :{
        output_relation : "relations_formationtemporal"
        input           : """
                            SELECT DISTINCT docid , type , eid1 , eid2 , entity1 , entity2 , is_correct 
                            FROM relation_candidates
                            WHERE type = 'FORMATIONTEMPORAL'
                          """
        udf             : ${PALEO_HOME}"/udf/load_relation_candidates.py"
        dependencies    : ["extract_relation_candidates"]
        output_batch_size: 1000000
        parallelism     : 4
        input_batch_size: 2
    }

    load_relation_varialbe_formation :{
        output_relation : "relations_formation"
        input           : """
                            SELECT DISTINCT docid , type , eid1 , eid2 , entity1 , entity2 , is_correct 
                            FROM relation_candidates
                            WHERE type = 'FORMATION'
                          """
        udf             : ${PALEO_HOME}"/udf/load_relation_candidates.py"
        dependencies    : ["extract_relation_candidates"]
        output_batch_size: 1000000
        parallelism     : 4
        input_batch_size: 2
    }

    load_relation_varialbe_formationlocation :{
        output_relation : "relations_formationlocation"
        input           : """
                            SELECT DISTINCT docid , type , eid1 , eid2 , entity1 , entity2 , is_correct 
                            FROM relation_candidates
                            WHERE type = 'FORMATIONLOCATION'
                          """
        udf             : ${PALEO_HOME}"/udf/load_relation_candidates.py"
        dependencies    : ["extract_relation_candidates"]
        output_batch_size: 1000000
        parallelism     : 4
        input_batch_size: 2
    }

    load_relation_varialbe_taxonomy :{
        output_relation : "relations_taxonomy"
        input           : """
                            SELECT DISTINCT docid , type , eid1 , eid2 , entity1 , entity2 , is_correct 
                            FROM relation_candidates
                            WHERE type = 'TAXONOMY' or type = 'TAXONOMY2'
                          """
        udf             : ${PALEO_HOME}"/udf/load_relation_candidates.py"
        dependencies    : ["extract_relation_candidates"]
        output_batch_size: 1000000
        parallelism     : 4
        input_batch_size: 2
    }

    global_temporal : {
        output_relation : "relations_formationtemporal_global"
        input           : "select distinct entity1, entity2, is_correct from relations_formationtemporal"
        udf             : ${PALEO_HOME}"/udf/load_global_relations.py"
        dependencies    : ["load_relation_varialbe_formationtemporal"]
        output_batch_size: 10000000
        input_batch_size: 2
    }

    global_location : {
        output_relation : "relations_formationlocation_global"
        input           : "select distinct entity1, entity2, is_correct from relations_formationlocation"
        udf             : ${PALEO_HOME}"/udf/load_global_relations.py"
        dependencies    : ["load_relation_varialbe_formationlocation"]
        output_batch_size: 10000000
        input_batch_size: 2
    }

    global_temporal_containment:{
        output_relation : "interval_containments"
        input           : """
                            SELECT t0.entity1 as "t0.formation", t0.entity2 as "t0.interval", t1.entity2 as "t1.interval"
                            FROM relations_formationtemporal_global t0, relations_formationtemporal_global t1 
                            WHERE t0.entity1 = t1.entity1 and t0.entity2 <> t1.entity2
                          """
        udf             : ${PALEO_HOME}"/udf/interval_containment.py"
        dependencies    : ["global_temporal"]
        output_batch_size: 10000000
        input_batch_size: 2
    }

    global_temporal_not_that_possible:{
        output_relation : "interval_not_that_possible"
        input           : """
                            SELECT t0.entity1 as "t0.formation", t0.entity2 as "t0.interval", t1.entity2 as "t1.interval"
                            FROM relations_formationtemporal_global t0, relations_formationtemporal_global t1 
                            WHERE t0.entity1 = t1.entity1 and t0.entity2 <> t1.entity2
                          """
        udf             : ${PALEO_HOME}"/udf/interval_not_that_possible.php"
        dependencies    : ["global_temporal"]
        output_batch_size: 10000000
        input_batch_size: 2
    }

  }


  inference.factors: {

    hardrule_taxonomy2 : {
        input_query: "select t0.features, t1.* from relation_candidates t0, relations_taxonomy t1 WHERE t0.type='TAXONOMY2' AND t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2 AND features='TAXONOMY2-[SYSTEMATIC PALEONTOLOGY SECTION HEADER TYPE 1]';"
        function: "Imply(relations_taxonomy.is_correct)"
        weight: "100"
    }

    fac_relations3 : {
        input_query: "select t0.features, t1.* from relation_candidates t0, relations_formationtemporal t1 WHERE t0.type='FORMATIONTEMPORAL' AND t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2;"
        function: "Imply(relations_formationtemporal.is_correct)"
        weight: "?(relation_candidates.features)"
    }

    fac_relations4 : {
        input_query: "select t0.features, t1.* from relation_candidates t0, relations_formationlocation t1 WHERE t0.type='FORMATIONLOCATION' AND t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2;"
        function: "Imply(relations_formationlocation.is_correct)"
        weight: "?(relation_candidates.features)"
    }

    fac_relations1 : {
        input_query: "select t0.features, t1.* from relation_candidates t0, relations_taxonomy t1 WHERE t0.type like 'TAXONOMY%' AND t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2;"
        function: "Imply(relations_taxonomy.is_correct)"
        weight: "?(relation_candidates.features)"
    }

    fac_relations2 : {
        input_query: "select t0.features, t1.* from relation_candidates t0, relations_formation t1 WHERE t0.type = 'FORMATION' AND t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2;"
        function: "Imply(relations_formation.is_correct)"
        weight: "?(relation_candidates.features)"
    }

    fac_global_location : {
        input_query: "SELECT t0.*, t1.* from relations_formationlocation t0, relations_formationlocation_global t1 WHERE t0.entity1=t1.entity1 AND t0.entity2=t1.entity2"
        function: "Imply(relations_formationlocation.is_correct, relations_formationlocation_global.is_correct)"
        weight: "10"
    }

    fac_global_temporal1 : {
        input_query: "SELECT t0.*, t1.* from relations_formationtemporal t0, relations_formationtemporal_global t1 WHERE t0.entity1=t1.entity1 AND t0.entity2=t1.entity2"
        function: "Imply(relations_formationtemporal.is_correct, relations_formationtemporal_global.is_correct)"
        weight: "10"
    }

    fac_global_temporal_containment1:{
        input_query: """
                    SELECT t0.id as "t0.id", t0.is_correct as "t0.is_correct", t1.id as "t1.id", t1.is_correct as "t1.is_correct"
                    FROM   relations_formationtemporal_global t0, relations_formationtemporal_global t1, interval_containments t2
                    WHERE  t0.entity1=t1.entity1 AND t0.entity1=t2.formation AND t0.entity2=t2.child AND t1.entity2=t2.parent AND t0.entity2 <> t1.entity2;
                     """
        function: "And(relations_formationtemporal_global.t0.is_correct, relations_formationtemporal_global.t1.is_correct)"
        weight: "-10"
    }

    # This rule is used to break the tie between large interval and small interval.
    # It does not matter how large this weight is -- it is just used to break the tie... 
    #
    fac_global_temporal_containment2:{
        input_query: """
                    SELECT distinct t0.id as "t0.id", t0.is_correct as "t0.is_correct"
                    FROM   relations_formationtemporal_global t0, interval_containments t2
                    WHERE  t0.entity1=t2.formation AND t0.entity2=t2.child;
                     """
        function: "And(relations_formationtemporal_global.t0.is_correct)"
        weight: "1.0"    
    }

    fac_global_temporal_not_that_possible1:{
        input_query: """
                    SELECT t0.id as "t0.id", t0.is_correct as "t0.is_correct", t1.id as "t1.id", t1.is_correct as "t1.is_correct"
                    FROM   relations_formationtemporal_global t0, relations_formationtemporal_global t1, interval_not_that_possible t2
                    WHERE  t0.entity1=t1.entity1 AND t0.entity1=t2.formation AND t0.entity2=t2.interval1 AND t1.entity2=t2.interval2 AND t0.entity2 <> t1.entity2;
                     """
        function: "And(relations_formationtemporal_global.t0.is_correct, relations_formationtemporal_global.t1.is_correct)"
        weight: "-10"
    }

  }

  sampler.sampler_args: "-l 100 -s 1 -i 100 -t 4 --diminish 0.95 --alpha 0.1"
  sampler.java_args = "-Xmx8g"

}










